package main

import "errors"
import "flag"

type Account struct {
	UUID     int // need to be generated by db?
	Name     string
	Balance  int
	channged bool
}

var ErrUUIDConflict = errors.New("UUID already exists")
var ErrAcountBelowZ = errors.New("Account balance below zero")
var ErrAccountNotFound = errors.New("Account not found")

var ac chan Account
var accounts map[int]Account

//var Accounts map[int]Account

func Create_account(name string, balance int) Account {
	// check if account exists
	id := Create_account_db(name, balance)
	account := Account{id, name, balance, false}

	return account
}

func (account *Account) Add_balance(amount int) {
	account.Balance += amount
	account.update()
}

func (account *Account) update() {
	// update_account_db(*account)
	// only pass in accounts once
	if account.channged == false {
		account.channged = true
		ac <- *account
	}
}

func account_by_uuid(uuid int) (Account, error) {
	var account Account
	if account, ok := accounts[uuid]; ok {
		return account, nil
	}
	return account, ErrAccountNotFound
}

func (account *Account) Print() {
	println(account.UUID, account.Name, account.Balance)
}

func (account *Account) Charge(amount int) error {
	if account.Balance-amount < 0 {
		return ErrAcountBelowZ
	}
	account.Balance -= amount
	account.update()
	return nil
}
func Delete_user(uuid int) error {
	err := delete_user_db(uuid)
	return err
}

func Get_all_accounts() []Account {
	var acs []Account
	for _, account := range accounts {
		acs = append(acs, account)
	}
	return acs
}

func main() {
	ac = make(chan Account)
	defer close(ac)

	cli := flag.Bool("cli", false, "start cli runner")
	api := flag.Bool("api", false, "start api server")
	flag.Parse()
	if *api {
		go InitServer()
	}

	if *cli {
		runner()
	}
}
func init() {
	accounts = make(map[int]Account)
	for _, account := range Get_all_accounts() {
		accounts[account.UUID] = account
	}
	InitDB()
}
